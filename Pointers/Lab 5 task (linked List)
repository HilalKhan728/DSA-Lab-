#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    Node(int d) : data(d), next(nullptr) {}
};

// LinkedList class
class LinkedList {
private:
    Node* head;
public:
    LinkedList() : head(nullptr) {}
    
    // Destructor to free memory
    ~LinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    // Insert at the beginning (emergency passenger)
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    // Insert at the end (normal passenger)
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
            return;
        }
        Node* current = head;
        while (current->next) {
            current = current->next;
        }
        current->next = newNode;
    }

    // Insert at a given position (special booking passenger)
    // Positions are 0-based index, so position 0 means beginning
    void insertAtPosition(int value, int pos) {
        if (pos <= 0) {
            insertAtBeginning(value);
            return;
        }

        Node* newNode = new Node(value);
        Node* current = head;

        // Traverse to node just before position pos
        int currentPos = 0;
        while (current && currentPos < pos - 1) {
            current = current->next;
            currentPos++;
        }

        // If current is nullptr, position is beyond list length; insert at end
        if (!current) {
            insertAtEnd(value);
            delete newNode; // already inserted new node inside insertAtEnd, so delete this
            return;
        }

        // Insert newNode after current
        newNode->next = current->next;
        current->next = newNode;
    }

    // Delete from beginning (first passenger boards)
    // Optional output of removed passenger ID via removedValue pointer
    bool deleteFromBeginning(int* removedValue = nullptr) {
        if (!head) return false; // empty list

        Node* temp = head;
        if (removedValue) {
            *removedValue = temp->data;
        }
        head = head->next;
        delete temp;
        return true;
    }

    // Display the queue
    void display() const {
        Node* current = head;
        while (current) {
            cout << current->data;
            if (current->next) cout << " -> ";
            current = current->next;
        }
        cout << "\n";
    }
};

int main() {
    LinkedList list;

    // Step 1: Add 3 passengers at the end
    list.insertAtEnd(101);
    list.insertAtEnd(102);
    list.insertAtEnd(103);
    cout << "Initial Queue after adding passengers:\n";
    list.display();

    // Step 2: Emergency passenger at beginning
    list.insertAtBeginning(999);
    cout << "After adding an emergency passenger at beginning:\n";
    list.display();

    // Step 3: Special booking passenger at position 2
    list.insertAtPosition(555, 2);
    cout << "After inserting special booking passenger at position 2:\n";
    list.display();

    // Step 4: First passenger boards (delete from beginning)
    int removed;
    list.deleteFromBeginning(&removed);
    cout << "After first passenger boards (deletion):\n";
    list.display();

    return 0;
}
